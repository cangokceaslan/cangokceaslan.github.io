{"version":3,"sources":["components/Loader/WhiteLoader.tsx","../../src/utils.js","../../src/components/TwitchEmbed.js","../../src/constants.js","../../src/components/TwitchChat.js","../../src/components/TwitchClip.js","../../src/components/TwitchPlayer.js","assets/svg/twitch.svg","components/Twitch/index.tsx"],"names":["WhiteLoader","props","arguments","length","undefined","loaded","size","thick","_jsx","className","children","style","width","height","fontSize","role","parseParentQuery","parent","window","location","hostname","join","getUnknownProps","propTypes","Object","keys","reduce","unknown","prop","hasOwnProperty","scriptElement","PropTypes","string","bool","isRequired","oneOf","oneOfType","number","func","arrayOf","defaultProps","TwitchEmbed","_validateProps","Twitch","Embed","this","_createEmbed","document","createElement","setAttribute","body","appendChild","addEventListener","prevProps","prevState","snapshot","withChat","updated","push","embed","player","getElementById","id","innerHTML","channel","setChannel","allowFullscreen","theme","_addEventListeners","AUTHENTICATE","onAuthenticate","VIDEO_PLAY","onVideoPlay","VIDEO_PAUSE","onVideoPause","VIDEO_READY","autoplay","muted","getPlayer","setVolume","pause","onVideoReady","Error","unknownProps","Component","TwitchChat","TWITCH_CHAT_URL","migration","toString","_createEmbedURL","TwitchClip","clip","TWITCH_CLIP_URL","mediaProps","TwitchPlayer","Player","_createPlayer","includes","collection","setCollection","video","setVideo","options","playsInline","time","hideControls","ENDED","onEnded","PAUSE","onPause","PLAY","onPlay","PLAYBACK_BLOCKED","onPlaybackBlocked","PLAYING","onPlaying","OFFLINE","onOffline","ONLINE","onOnline","READY","onReady","EMBED_URL","_useState","useState","_useState2","_slicedToArray","setLoaded","useEffect","twitchElement","querySelector","remove","script","_jsxs","src","TwitchSvg","background","allowfullscreen","console","log","position","top"],"mappings":"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","file":"static/js/20.9e4be1f0.chunk.js","sourcesContent":["const WhiteLoader = (props: {\n    loaded: boolean | undefined;\n    size?: number;\n    thick?: number;\n} = {\n        loaded: false,\n        size: 125,\n        thick: 25\n    }) => {\n    return (\n        <div className=\"justify-content-center align-items-center d-flex\">\n            <div className=\"loader-container\">\n                <div className=\"spinner-border text-white loader\" style={{\n                    width: props?.size || 125,\n                    height: props?.size || 125,\n                    fontSize: props?.thick || 25\n                }} role=\"status\">\n                    <span className=\"visually-hidden\">Loading...</span>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default WhiteLoader","const parseParentQuery = (parent) => {\n  return `&parent=${[window.location.hostname, ...parent].join('&parent=')}`;\n};\n\nconst getUnknownProps = (props, propTypes) => {\n  return Object.keys(props).reduce((unknown, prop) => {\n    if (propTypes.hasOwnProperty(prop)) {\n      return unknown;\n    }\n\n    unknown[prop] = props[prop];\n    return unknown;\n  }, {});\n};\n\nexport {\n  parseParentQuery,\n  getUnknownProps\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TWITCH_EMBED_URL, MEDIA_DEFAULT_WIDTH, MEDIA_DEFAULT_HEIGHT } from '../constants';\nimport { getUnknownProps } from '../utils';\n\nlet scriptElement = null;\n\nconst loadScript = () => {\n  scriptElement = document.createElement('script');\n  scriptElement.setAttribute('type', 'text/javascript');\n  scriptElement.setAttribute('src', TWITCH_EMBED_URL);\n  document.body.appendChild(scriptElement);\n};\n\nconst propTypes = {\n  id: PropTypes.string,\n  allowFullscreen: PropTypes.bool,\n  channel: PropTypes.string.isRequired,\n  fontSize: PropTypes.oneOf(['small', 'medium', 'large']),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  withChat: PropTypes.bool,\n  theme: PropTypes.oneOf(['light', 'dark']),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onAuthenticate: PropTypes.func,\n  onVideoPlay: PropTypes.func,\n  onVideoPause: PropTypes.func,\n  onVideoReady: PropTypes.func,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  parent: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst defaultProps = {\n  id: 'twitch-embed',\n  allowFullscreen: true,\n  fontSize: 'small',\n  height: MEDIA_DEFAULT_HEIGHT,\n  withChat: true,\n  theme: 'light',\n  width: MEDIA_DEFAULT_WIDTH,\n  onAuthenticate: () => null,\n  onVideoPlay: () => null,\n  onVideoPause: () => null,\n  onVideoReady: () => null,\n  autoplay: true,\n  muted: false,\n  parent: []\n};\n\nclass TwitchEmbed extends Component {\n  componentDidMount() {\n    this._validateProps();\n\n    if (window.Twitch && window.Twitch.Embed) {\n      return this._createEmbed();\n    }\n\n    if (!scriptElement) {\n      loadScript();\n    }\n\n    scriptElement.addEventListener('load', () => {\n      this._createEmbed();\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n\n    if (prevProps.withChat) {\n      this.embed = null;\n      this.player = null;\n      document.getElementById(prevProps.id).innerHTML = '';\n      return this._createEmbed();\n    }\n\n    const updatedPropsExceptChannel = Object.keys(prevProps).reduce((updated, prop) => {\n      if (prop === 'channel') {\n        return updated;\n      }\n\n      if (prevProps[prop] !== this.props[prop]) {\n        updated.push(prop);\n      }\n\n      return updated;\n    }, []);\n\n    if (updatedPropsExceptChannel.length > 0) {\n      this.embed = null;\n      this.player = null;\n      document.getElementById(prevProps.id).innerHTML = '';\n      return this._createEmbed();\n    }\n\n    if (prevProps.channel !== this.props.channel) {\n      this.player.setChannel(this.props.channel);\n    }\n  }\n\n  _createEmbed() {\n    this.embed = new window.Twitch.Embed(this.props.id, {\n      allowfullscreen: this.props.allowFullscreen,\n      channel: this.props.channel,\n      'font-size': this.props.fontSize,\n      height: '100%',\n      layout: this.props.withChat ? 'video-with-chat' : 'video',\n      theme: this.props.theme,\n      width: '100%',\n      parent: this.props.parent\n    });\n\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    this.embed.addEventListener(window.Twitch.Embed.AUTHENTICATE, this.props.onAuthenticate);\n    this.embed.addEventListener(window.Twitch.Embed.VIDEO_PLAY, this.props.onVideoPlay);\n    this.embed.addEventListener(window.Twitch.Embed.VIDEO_PAUSE, this.props.onVideoPause);\n    this.embed.addEventListener(window.Twitch.Embed.VIDEO_READY, () => {\n      const { autoplay, muted } = this.props;\n      this.player = this.embed.getPlayer();\n\n      if (muted) {\n        this.player.setVolume(0);\n      }\n\n      if (!autoplay) {\n        this.player.pause();\n      }\n\n      this.props.onVideoReady(this.player);\n    });\n  }\n\n  _validateProps() {\n    if (!this.props.channel) {\n      throw new Error('A channel prop must be supplied to TwitchEmbed!');\n    }\n  }\n\n  render() {\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <div style={{ width: this.props.width, height: this.props.height }} id={this.props.id} {...unknownProps} />\n    );\n  }\n}\n\nTwitchEmbed.propTypes = propTypes;\nTwitchEmbed.defaultProps = defaultProps;\n\nexport default TwitchEmbed;\n","const TWITCH_EMBED_URL = 'https://embed.twitch.tv/embed/v1.js';\nconst TWITCH_CHAT_URL = 'https://www.twitch.tv/embed';\nconst TWITCH_CLIP_URL = 'https://clips.twitch.tv/embed';\nconst TWITCH_PLAYER_URL = 'https://player.twitch.tv/js/embed/v1.js';\n\nconst CHAT_DEFAULT_HEIGHT = 500;\nconst CHAT_DEFAULT_WIDTH = 350;\nconst MEDIA_DEFAULT_HEIGHT = 480;\nconst MEDIA_DEFAULT_WIDTH = 940;\n\nexport {\n  TWITCH_EMBED_URL,\n  TWITCH_CHAT_URL,\n  TWITCH_CLIP_URL,\n  TWITCH_PLAYER_URL,\n  CHAT_DEFAULT_HEIGHT,\n  CHAT_DEFAULT_WIDTH,\n  MEDIA_DEFAULT_HEIGHT,\n  MEDIA_DEFAULT_WIDTH\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { CHAT_DEFAULT_HEIGHT, CHAT_DEFAULT_WIDTH, TWITCH_CHAT_URL } from '../constants';\nimport { getUnknownProps, parseParentQuery } from '../utils';\n\nconst propTypes = {\n  channel: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  theme: PropTypes.oneOf(['light', 'dark']),\n  parent: PropTypes.arrayOf(PropTypes.string),\n  migration: PropTypes.bool\n};\n\nconst defaultProps = {\n  id: 'twitch-chat-embed',\n  height: CHAT_DEFAULT_HEIGHT,\n  width: CHAT_DEFAULT_WIDTH,\n  theme: 'light',\n  migration: true,\n  parent: []\n};\n\nclass TwitchChat extends Component {\n  componentDidMount() {\n    this._validateProps();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n  }\n\n  _validateProps() {\n    if (!this.props.channel) {\n      throw new Error('A channel prop must be supplied to TwitchChat!');\n    }\n  }\n\n  _createEmbedURL() {\n    const { channel, theme, parent, migration } = this.props;\n\n    const themeQuery = theme === 'dark' ? '?darkpopout' : '';\n    const migrationFirstChar = theme !== 'dark' ? '?' : '&';\n    return `${TWITCH_CHAT_URL}/${channel}/chat${themeQuery}${migrationFirstChar}migration=${migration.toString()}${parseParentQuery(parent)}`;\n  }\n\n  render() {\n    const { height, id, width } = this.props;\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <iframe\n        title={`Twitch Chat - ${id}`}\n        id={id}\n        src={this._createEmbedURL()}\n        height={height}\n        width={width}\n        frameBorder={0}\n        {...unknownProps}\n      />\n    );\n  }\n}\n\nTwitchChat.propTypes = propTypes;\nTwitchChat.defaultProps = defaultProps;\n\nexport default TwitchChat;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { MEDIA_DEFAULT_HEIGHT, MEDIA_DEFAULT_WIDTH, TWITCH_CLIP_URL } from '../constants';\nimport { getUnknownProps, parseParentQuery } from '../utils';\n\nconst propTypes = {\n  clip: PropTypes.string.isRequired,\n  id: PropTypes.string,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  allowFullscreen: PropTypes.bool,\n  parent: PropTypes.arrayOf(PropTypes.string),\n  migration: PropTypes.bool\n};\n\nconst defaultProps = {\n  id: 'twitch-clip-embed',\n  autoplay: true,\n  muted: false,\n  height: MEDIA_DEFAULT_HEIGHT,\n  width: MEDIA_DEFAULT_WIDTH,\n  allowFullscreen: true,\n  migration: true,\n  parent: []\n};\n\nclass TwitchClip extends Component {\n  componentDidMount() {\n    this._validateProps();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n  }\n\n  _validateProps() {\n    if (!this.props.clip) {\n      throw new Error('A clip prop must be supplied to TwitchClip!');\n    }\n  }\n\n  _createEmbedURL() {\n    const { clip, autoplay, muted, parent, migration } = this.props;\n\n    return `${TWITCH_CLIP_URL}?clip=${clip}&autoplay=${autoplay}&muted=${muted}&migration=${migration.toString()}${parseParentQuery(parent)}`;\n  }\n\n  render() {\n    const { id, height, width, allowFullscreen } = this.props;\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <iframe\n        title={`Twitch Clip Embed - ${id}`}\n        src={this._createEmbedURL()}\n        id={id}\n        height={height}\n        width={width}\n        allowFullScreen={allowFullscreen}\n        frameBorder={0}\n        {...unknownProps}\n      />\n    );\n  }\n}\n\nTwitchClip.propTypes = propTypes;\nTwitchClip.defaultProps = defaultProps;\n\nexport default TwitchClip;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TWITCH_PLAYER_URL, MEDIA_DEFAULT_WIDTH, MEDIA_DEFAULT_HEIGHT } from '../constants';\nimport { getUnknownProps } from '../utils';\n\nconst mediaProps = ['channel', 'collection', 'video'];\nlet scriptElement = null;\n\nconst loadScript = () => {\n  scriptElement = document.createElement('script');\n  scriptElement.setAttribute('type', 'text/javascript');\n  scriptElement.setAttribute('src', TWITCH_PLAYER_URL);\n  document.body.appendChild(scriptElement);\n};\n\nconst propTypes = {\n  id: PropTypes.string,\n  channel: PropTypes.string,\n  collection: PropTypes.string,\n  video: PropTypes.string,\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  playsInline: PropTypes.bool,\n  autoplay: PropTypes.bool,\n  muted: PropTypes.bool,\n  allowFullscreen: PropTypes.bool,\n  time: PropTypes.string,\n  hideControls: PropTypes.bool,\n  onEnded: PropTypes.func,\n  onPause: PropTypes.func,\n  onPlay: PropTypes.func,\n  onPlaybackBlocked: PropTypes.func,\n  onPlaying: PropTypes.func,\n  onOffline: PropTypes.func,\n  onOnline: PropTypes.func,\n  onReady: PropTypes.func,\n  parent: PropTypes.arrayOf(PropTypes.string)\n};\n\nconst defaultProps = {\n  id: 'twitch-player-embed',\n  channel: null,\n  collection: null,\n  video: null,\n  height: MEDIA_DEFAULT_HEIGHT,\n  width: MEDIA_DEFAULT_WIDTH,\n  playsInline: true,\n  autoplay: true,\n  muted: false,\n  allowFullscreen: true,\n  time: '0h0m0s',\n  hideControls: false,\n  onEnded: () => null,\n  onPause: () => null,\n  onPlay: () => null,\n  onPlaybackBlocked: () => null,\n  onPlaying: () => null,\n  onOffline: () => null,\n  onOnline: () => null,\n  onReady: () => null,\n  parent: []\n};\n\nclass TwitchPlayer extends Component {\n  componentDidMount() {\n    this._validateProps();\n\n    if (window.Twitch && window.Twitch.Player) {\n      return this._createPlayer();\n    }\n\n    if (!scriptElement) {\n      loadScript();\n    }\n\n    scriptElement.addEventListener('load', () => {\n      this._createPlayer();\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    this._validateProps();\n\n    const updatedPropsExceptMedia = Object.keys(prevProps).reduce((updated, prop) => {\n      if (mediaProps.includes(prop)) {\n        return updated;\n      }\n\n      if (prevProps[prop] !== this.props[prop]) {\n        updated.push(prop);\n      }\n      return updated;\n    }, []);\n\n    if (updatedPropsExceptMedia.length > 0) {\n      this.player = null;\n      document.getElementById(prevProps.id).innerHTML = '';\n      return this._createPlayer();\n    }\n\n    if (prevProps.channel !== this.props.channel && this.props.channel) {\n      return this.player.setChannel(this.props.channel);\n    }\n\n    if (prevProps.collection !== this.props.collection && this.props.collection) {\n      this.player.setCollection(this.props.collection);\n    }\n\n    if (prevProps.video !== this.props.video && this.props.video) {\n      this.player.setVideo(`v${this.props.video}`);\n    }\n  }\n\n  _createPlayer() {\n    const options = {\n      height: '100%',\n      width: '100%',\n      playsinline: this.props.playsInline,\n      allowfullscreen: this.props.allowFullscreen,\n      autoplay: this.props.autoplay,\n      muted: this.props.muted,\n      time: this.props.time,\n      controls: !this.props.hideControls,\n      parent: this.props.parent\n    };\n\n    if (this.props.channel) {\n      options.channel = this.props.channel;\n    }\n\n    if (this.props.video) {\n      options.video = this.props.video;\n    }\n\n    if (this.props.collection) {\n      options.collection = this.props.collection;\n    }\n\n    this.player = new window.Twitch.Player(this.props.id, options);\n    this._addEventListeners();\n  }\n\n  _addEventListeners() {\n    this.player.addEventListener(window.Twitch.Player.ENDED, this.props.onEnded);\n    this.player.addEventListener(window.Twitch.Player.PAUSE, this.props.onPause);\n    this.player.addEventListener(window.Twitch.Player.PLAY, this.props.onPlay);\n    this.player.addEventListener(window.Twitch.Player.PLAYBACK_BLOCKED, this.props.onPlaybackBlocked);\n    this.player.addEventListener(window.Twitch.Player.PLAYING, this.props.onPlaying);\n    this.player.addEventListener(window.Twitch.Player.OFFLINE, this.props.onOffline);\n    this.player.addEventListener(window.Twitch.Player.ONLINE, this.props.onOnline);\n    this.player.addEventListener(window.Twitch.Player.READY, () => {\n      this.props.onReady(this.player);\n    });\n  }\n\n  _validateProps() {\n    const { channel, collection, video } = this.props;\n\n    if (!channel && !collection && !video) {\n      throw new Error('A channel, collection or video prop must be supplied to TwitchPlayer!');\n    }\n  }\n\n  render() {\n    const unknownProps = getUnknownProps(this.props, propTypes);\n\n    return (\n      <div id={this.props.id} style={{ width: this.props.width, height: this.props.height }} {...unknownProps} />\n    );\n  }\n}\n\nTwitchPlayer.propTypes = propTypes;\nTwitchPlayer.defaultProps = defaultProps;\n\nexport default TwitchPlayer;\n","export default __webpack_public_path__ + \"static/media/twitch.676e5337.svg\";","import React, { Component, ComponentClass, ComponentType, FunctionComponent, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { TwitchEmbed } from 'react-twitch-embed';\nimport TwitchSvg from '@assets/svg/twitch.svg'\nimport '@components/Twitch/index.scss';\nimport WhiteLoader from '@components/Loader/WhiteLoader';\nconst EMBED_URL = 'https://embed.twitch.tv/embed/v1.js';\nconst Twitch: FunctionComponent = (props) => {\n    const [loaded, setLoaded] = useState<boolean>(false);\n    useEffect(() => {\n        const twitchElement = document.querySelector('script[src=\"' + EMBED_URL + '\"]');\n        if (twitchElement) {\n            twitchElement.remove()\n        }\n        const script = document.createElement('script');\n        script.setAttribute(\n            'src',\n            EMBED_URL\n        );\n        script.addEventListener('load', () => {\n            setLoaded(true);\n        });\n        document.body.appendChild(script);\n    }, [])\n    if (!loaded) {\n        return <div className=\"container-fluid twitch-container\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"twitch-logo\" style={{ position: \"absolute\", top: 50 }}>\n                        <img\n                            src={TwitchSvg}\n                            width=\"150px\"\n                            height=\"auto\"\n                        />\n                    </div>\n                    <WhiteLoader loaded={loaded} />\n                </div>\n            </div>\n        </div>\n    }\n    return (\n        <div className=\"container-fluid twitch-container\">\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"twitch-logo\">\n                        <img\n                            src={TwitchSvg}\n                            width=\"150px\"\n                            height=\"auto\"\n                        />\n                    </div>\n                    <div className=\"d-flex align-items-center justify-content-center\">\n                        <div className=\"padder\" style={{ background: \"white\" }}>\n                            <div>\n                                <div>\n                                    <div className=\"justify-content-center\">\n                                        <TwitchEmbed\n                                            channel=\"cangokceaslan\"\n                                            id=\"cangokceaslan\"\n                                            theme=\"dark\"\n                                            allowfullscreen={true}\n                                            width=\"100%\"\n                                            onVideoPause={() => console.log(':(')}\n                                        />\n                                    </div>\n                                </div>                                </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    )\n}\n\n\nexport default Twitch;"],"sourceRoot":""}